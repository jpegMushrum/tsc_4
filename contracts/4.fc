{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}
forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  builder result = begin_cell();
  int char = 0;
  int flag = 1;
  shift = shift % 26;
  int ashift = shift - 26;
  tuple stack = null();
  slice s1 = text.begin_parse();
  slice s2 = null();
 
  s1~skip_bits(32);

  while (~ s1.slice_data_empty?()) {
    char = s1~load_uint(8);      
    if ((char <= 90) & (char + shift > 90)) {
      char += ashift;
    }
    else {
      if ((char <= 122) & (char + shift > 122)) {
        char += ashift;
      }
      else {
          if (((char <= 90) & (char >= 65)) | ((char <= 122) & (char >= 97))) {
          char += shift;
        }
      }
    }
    result~store_uint(char,8);
  }

  while (~ s1.slice_refs_empty?()) {
    stack~push_back(result);
    result = begin_cell();
    s1 = s1~load_ref().begin_parse();
    while (~ s1.slice_data_empty?()) {
      char = s1~load_uint(8);
      if ((char <= 90) & (char + shift > 90)) {
        char += ashift;
      }
      else {
        if ((char <= 122) & (char + shift > 122)) {
          char += ashift;
        }
        else {
          if (((char <= 90) & (char >= 65)) | ((char <= 122) & (char >= 97))) {
            char += shift;
          }
        }
      }
      result~store_uint(char,8);
    }
  }

  while (~ stack.is_null()) {
    result = stack~pop_back().store_ref(result.end_cell());
  }
  result = begin_cell().store_uint(0,32).store_slice(result.end_cell().begin_parse());

  return result.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  builder result = begin_cell();
  int char = 0;
  int flag = 1;
  shift = shift % 26;
  int ashift = shift - 26;
  tuple stack = null();
  slice s1 = text.begin_parse();
  slice s2 = null();

  while (~ s1.slice_data_empty?()) {
    char = s1~load_uint(8);
    if (char >= 65) & (char - shift < 65) {
      char -= ashift;
    }
    else {
      if (char >= 97) & (char - shift < 97) {
        char -= ashift;
      }
      else {
        if ((char <= 90) & (char >= 65)) | ((char <= 122) & (char >= 97)) {
          char -= shift;
        }
      }
    }
    result~store_uint(char,8);
  }

  while (~ s1.slice_refs_empty?()) {
    stack~push_back(result);
    result = begin_cell();
    s1 = s1~load_ref().begin_parse();
    while (~ s1.slice_data_empty?()) {
      char = s1~load_uint(8);
      if (char >= 65) & (char - shift < 65) {
        char -= ashift;
      }
      else {
        if (char >= 97) & (char - shift < 97) {
          char -= ashift;
        }
        else {
          if ((char <= 90) & (char >= 65)) | ((char <= 122) & (char >= 97)) {
            char -= shift;
          }
        }
      }
      result~store_uint(char,8);
    }
  }
  
  while (~ stack.is_null()) {
    result = stack~pop_back().store_ref(result.end_cell());
  }
  result = begin_cell().store_uint(0,32).store_slice(result.end_cell().begin_parse());

  return result.end_cell();
}

